#!/usr/bin/env rua
--[[
take an ephemeris header and double buffer,
slice a subsection out of it
write a new ephemeris header and double buffer
--]]
local Julian = require 'solarsystem.julian'

local basepath = path'eph/406'
local hdr = assert(fromlua((assert(basepath'header.luaconfig':read()))))
local filestr = assert(basepath'f64/de406.f64.raw':read())
local numDoubles = #filestr / ffi.sizeof'double'
local filedata = ffi.cast('double*', filestr)

assert(numDoubles % hdr.numCoeffs, 0)
local numRecords = numDoubles / hdr.numCoeffs
print('read '..numRecords..' records')

-- TODO this in eph.lua as well
local struct = require 'struct'
local Record = struct{
	name = 'Record',
	union = true,
	fields = table{
		{name='coeffs', type='double['..hdr.numCoeffs..']'},
		{type = struct{
			anonymous = true,
			fields = table{
				{name='time', type='double[2]'},
			}:append(
				table.mapi(hdr.objs, |o| do
					return {
						name = o.name,
						type = 'double['..(o.numCoeffs * o.numComponents * o.numSubIntervals)..']',
						--[[ TODO add multi dim array support in struct...
						type = 'double['..o.numCoeffs
							..']['..o.numComponents
							..']['..o.numSubIntervals
							..']',
						--]]
					}
				end)
			),
		}},
	},
}
for _,o in ipairs(hdr.objs) do
	assert.eq(
		ffi.offsetof('Record', o.name),
		(o.offset - 1) * ffi.sizeof'double'
	)
	assert.eq(
		ffi.sizeof(ffi.cast('Record*', ffi.null)[o.name]),
		o.numCoeffs * o.numComponents * o.numSubIntervals * ffi.sizeof'double'
	)
end
print('sizeof Record', ffi.sizeof'Record')

assert.eq(ffi.sizeof'Record' * numRecords, #filestr)
local records = ffi.cast('Record*', filestr)

local julianDayToDateStr=|j|do
	local c = Julian.toCalendar(j)
	return ('%04d-%02d-%02d_%02d:%02d:%02d'):format(
		c.year,
		c.month,
		c.day,
		c.hour,
		c.min,
		c.sec
	)
end
local jdayandstr=|j| j..' '..julianDayToDateStr(j)

local musbenumber=|x| tonumber(x) or error("failed to parse number "..tostring(x))

local findRecord = |datestr|do
	local y,m,d,H,M,S = datestr:match'^(%d%d%d%d).(%d%d).(%d%d).(%d%d).(%d%d).(%d%d)$'
	assert(y, "failed to parse datestr "..tostring(datestr))
	local jday = Julian.fromCalendar{
		year=musbenumber(y),
		month=musbenumber(m),
		day=musbenumber(d),
		hour=musbenumber(H),
		min=musbenumber(M),
		sec=musbenumber(S),
	}
	if jday < records[0].time[0] then
		return -1
	end
	for i=0,numRecords-1 do
		if jday < records[i].time[1] then
			return i
		end
	end
	return numRecords
end

print('slice date range', cmdline.from, cmdline.to)
local i0 = cmdline.from and math.clamp(findRecord(cmdline.from), 0, numRecords-1) or 0
local i1 = cmdline.to and math.clamp(findRecord(cmdline.to), 0, numRecords-1) or numRecords-1
print('slice index range', i0, i1)

local dstpath = path(cmdline.dst or 'slice')
if dstpath:exists() then
	io.stderr:write('DANGER! dest path '..dstpath..' already exists\n')
end
dstpath:mkdir(true)

local deepcopy
deepcopy = |t|fromlua(tolua(t))	-- lazy way
local dsthdr = deepcopy(hdr)
dsthdr.epoch1 = records[i0].time[0]
dsthdr.epoch2 = records[i1].time[1]	+ dsthdr.interval	-- idk why this is but this is how it is in the original de406 data, so lets see what comes out of doing it this way
print('slice julian day range', dsthdr.epoch1, dsthdr.epoch2)

-- there's probably others but meh.
dstpath'header.luaconfig':write(tolua(dsthdr))
dstpath'f64':mkdir()
dstpath'f64''de406.f64.raw':write(
	ffi.string(
		records + i0,
		(i1 - i0 + 1) * ffi.sizeof'Record'
	)
)
